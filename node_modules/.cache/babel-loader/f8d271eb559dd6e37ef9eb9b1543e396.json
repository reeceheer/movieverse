{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\zzz\\\\Desktop\\\\movieverse\\\\movieverse\\\\src\\\\Context\\\\MovieContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, createContext, useEffect } from \"react\";\nexport const MovieContext = /*#__PURE__*/createContext();\nexport const MovieState = ({\n  children\n}) => {\n  _s();\n\n  /* My API key from the movie database */\n  const API_KEY = \"c4754b29495fbcd478d0882a9f03490b\";\n  /* states */\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [hiddenMenu, setHiddenMenu] = useState(true);\n  const [activeLink, setActiveLink] = useState(\"Popular\");\n  /* Popular set to active Link so movies can show up on popular page when clicked */\n\n  const [popularMovies, setPopularMovies] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [movies, setMovies] = useState([]);\n  /* function to get popular movies from the movie database using my API key */\n\n  const getPopularMovies = async () => {\n    const popularMoviesResponse = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=4`\n    /* fetches the API_KEY state to get access to the movies in tmbd */\n    );\n    const popularMoviesData = await popularMoviesResponse.json();\n    setPopularMovies(popularMoviesData);\n  };\n\n  const getMovies = async () => {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${currentPage}`\n    /* fetches the currentPage state which is set to 1 */\n    );\n    const data = await response.json();\n\n    if (search.trim() === '') {\n      setMovies(data);\n    }\n  };\n\n  const handleSearch = async e => {\n    e.preventDefault();\n    if (search.trim === '') return;\n    const searchResponse = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${search}&page=${currentPage}`);\n    const searchData = await searchResponse.json();\n    setMovies(searchData);\n  };\n\n  useEffect(() => {\n    getPopularMovies();\n  }, []);\n  useEffect(() => {\n    getMovies();\n  }, [search, currentPage]);\n  useEffect(() => {\n    const loadingTimeout = setTimeout(() => {\n      setIsLoading(false);\n    }, 1300);\n    return () => clearTimeout(loadingTimeout);\n  }, [movies, currentPage]);\n  return /*#__PURE__*/_jsxDEV(MovieContext.Provider, {\n    value: {\n      hiddenMenu,\n      setHiddenMenu,\n      activeLink,\n      setActiveLink,\n      popularMovies,\n      search,\n      setSearch,\n      currentPage,\n      setCurrentPage,\n      movies,\n      setMovies,\n      getPopularMovies,\n      getMovies,\n      handleSearch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n};\n\n_s(MovieState, \"7BA9YEuoNiOnjPP4gHz8Xh7PNpk=\");\n\n_c = MovieState;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieState\");","map":{"version":3,"sources":["C:/Users/zzz/Desktop/movieverse/movieverse/src/Context/MovieContext.js"],"names":["React","useState","createContext","useEffect","MovieContext","MovieState","children","API_KEY","isLoading","setIsLoading","hiddenMenu","setHiddenMenu","activeLink","setActiveLink","popularMovies","setPopularMovies","search","setSearch","currentPage","setCurrentPage","movies","setMovies","getPopularMovies","popularMoviesResponse","fetch","popularMoviesData","json","getMovies","response","data","trim","handleSearch","e","preventDefault","searchResponse","searchData","loadingTimeout","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import React, { useState, createContext, useEffect } from \"react\";\r\n\r\nexport const MovieContext = createContext();\r\n\r\nexport const MovieState = ({ children }) => {\r\n   /* My API key from the movie database */\r\n   const API_KEY = \"c4754b29495fbcd478d0882a9f03490b\";\r\n\r\n   /* states */\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [hiddenMenu, setHiddenMenu] = useState(true);\r\n    const [activeLink, setActiveLink] = useState(\"Popular\"); /* Popular set to active Link so movies can show up on popular page when clicked */\r\n    const [popularMovies, setPopularMovies] = useState([]);\r\n    const [search, setSearch] = useState(\"\");\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    /* function to get popular movies from the movie database using my API key */\r\n    const getPopularMovies = async () => {\r\n       const popularMoviesResponse = await fetch(\r\n          `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=4` /* fetches the API_KEY state to get access to the movies in tmbd */\r\n          );\r\n    const popularMoviesData = await popularMoviesResponse.json();\r\n         setPopularMovies(popularMoviesData);\r\n    };\r\n\r\n    const getMovies = async () => {\r\n       const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&language=en-US&page=${currentPage}` /* fetches the currentPage state which is set to 1 */\r\n       );\r\n    const data = await response.json();\r\n       if(search.trim() === '') {\r\n          setMovies(data);\r\n       }\r\n    };\r\n\r\n    const handleSearch = async (e) => {\r\n       e.preventDefault();\r\n       if(search.trim === '') return;\r\n       const searchResponse = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${search}&page=${currentPage}`\r\n       );\r\n       const searchData = await searchResponse.json();\r\n       setMovies(searchData);\r\n    };\r\n\r\n    useEffect(() => {\r\n       getPopularMovies();\r\n    },[])\r\n\r\n    useEffect(() => {\r\n      getMovies();\r\n    },[search, currentPage])\r\n\r\n    useEffect(() => {\r\n      const loadingTimeout = setTimeout(() => {\r\n         setIsLoading(false);\r\n      }, 1300)\r\n      return () => clearTimeout(loadingTimeout);\r\n    },[movies, currentPage])\r\n\r\n   return (\r\n      <MovieContext.Provider \r\n        value={{ hiddenMenu,\r\n         setHiddenMenu,\r\n         activeLink,\r\n         setActiveLink,\r\n         popularMovies,\r\n         search,\r\n         setSearch,\r\n         currentPage,\r\n         setCurrentPage,\r\n         movies,\r\n         setMovies,\r\n         getPopularMovies,\r\n         getMovies,\r\n         handleSearch,\r\n                   }}>\r\n          {children}\r\n      </MovieContext.Provider>\r\n   );\r\n};"]},"metadata":{},"sourceType":"module"}